{
	"Powershell skeleton": {
		"prefix": "skeleton",
		"body": [
			"# powershell -ExecutionPolicy Bypass -File this.ps",
			"# works as named (-workingDir some/dir) or just in order",
			"param(",
			"  # with default",
			"  [string]\\$workingDir=\"C:\\working\",",
			"  # default is \\$null",
			"  [string]\\$targetDir",
			")",
			"\\$ErrorActionPreference = \"Stop\""
		]
	},
	"Powershell download": {
		"prefix": "download",
		"body": [
			"\\$webClient = New-Object System.Net.WebClient",
			"# disable proxy",
			"\\$webClient.Proxy = \\$null",
			"\\$webClient.DownloadFile(\\$url, \\$path)"
		]
	},
	"Powershell json data": {
		"prefix": "json data",
		"body": [
			"#\\$fromFile = Get-Content \\$jsonPath | ConvertFrom-Json",
			"\\$inline = @\"",
			"{",
			"    \"prod\": {",
			"        \"fullname\": \"Production\",",
			"        \"servers\": [\"server-11377\", \"server-11378\", \"server-11379\"]",
			"    },",
			"    \"dev\" : {",
			"        \"fullname\": \"Development\",",
			"        \"servers\": [\"server-11853\", \"server-11854\", \"server-11855\"]",
			"    }",
			"}",
			"\"@ | ConvertFrom-Json",
			"",
			"Write-Output \\$inline.prod.fullname",
			"Write-Output \\$inline.prod.servers[0]",
			"",
			"foreach (\\$env in @(\"dev\", \"prod\")) {",
			"    foreach (\\$server in \\$inline.\\$env.servers) {",
			"        \\$name = \\$inline.\\$env.fullname",
			"        Write-Output \"\\$name server: \\$server\"",
			"    }",
			"}"
		]
	},
	"Powershell run program with arguments": {
		"prefix": "run-with-arguments",
		"body": [
			"& \\$pathToExe @programArgs | Out-Null # or Out-File",
			"if (\\$LastExitCode -gt 0) { throw \"\\$pathToExe failed with error \\$LastExitCode\" }"
		]
	},
	"Powershell Task wrapper": {
		"prefix": "task-wrapper",
		"body": [
			"function Task ([string]\\$taskName, [scriptblock]\\$content) {",
			"  \\$startTime = Get-Date",
			"  Write-Host (\">>> {0} started at {1:u}...\" -f \\$taskName, \\$startTime)",
			"  &\\$content",
			"  Write-Host (\"<<< {0} complete after {1:hh':'mm':'ss'.'FFF}\" -f \\$taskName, ((Get-Date) - \\$startTime))",
			"}"
		]
	}
}
